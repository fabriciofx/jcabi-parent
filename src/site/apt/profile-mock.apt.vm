 ------
 "Mock" Profile for Building of a "-mock.jar" artifact
 ------
 Yegor Bugayenko
 ------
 2013-01-06
 ------

~~
~~ Copyright (c) 2012-2025 Yegor Bugayenko
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

"Mock" Profile for Building of a "-mock.jar" artifact

  Profile <<<mock>>> is activated automatically when there is a
  <<<src/mock/java>>> directory in the project. The profile adds this
  directory to the list of test directories and compiles and packages its
  content into a JAR with a <<<mock>>> classifier. Only classes that
  named as <<<*Mocker.java>>> or <<<*Mocker$*.java>>> are included into the JAR.

  This mechanism is very helpful when you develop an API that contains
  interfaces that have to be mocked in other modules or projects. For example,
  these are the interfaces from your public API in module <<<example-api>>>:

+--
package com.example;
public interface Document {
  String content();
}
public interface Printer {
  void print(Document doc);
}
+--

  Class <<<Printer>>> expects an instance of <<<Document>>> as a single
  parameter of method <<<print()>>>. In another module, say, <<<example-printer>>>
  you want to implement a <<<Printer>>> and to mock a <<<Document>>> in order
  to test it:

+--
import org.junit.Test;
import org.mockito.Mockito;
public PrinterTest {
  @Test
  public void testPrinting() {
    Printer printer = new PrinterImpl();
    Document doc = Mockito.mock(Document.class);
    Mockito.doReturn("some test content").when(document).content();
    printer.print(doc);
    Mockito.verify(doc).content();
  }
}
+--

  A more convenient way to do it is to ship a mocker together with
  an interface:

+--
public DocumentMocker {
  private Document doc = Mockito.mock(Document.class);
  public DocumentMocker withContent(String text) {
    Mockito.doReturn(text).when(this.doc).content();
    return this;
  }
  public Document mock() {
    return this.doc;
  }
}
+--

  This mocker will be used as following:

+--
import org.junit.Test;
public PrinterTest {
  @Test
  public void testPrinting() {
    Printer printer = new PrinterImpl();
    Document doc = new DocumentMocker()
      .withContent("some test content")
      .mock();
    printer.print(doc);
    Mockito.verify(doc).content();
  }
}
+--

  For complex interfaces such mockers may become a very convenient tool.

  Place the mocker into <<<src/mock/java/com/example/DocumentMocker.java>>>
  file and it will be compiled and packaged into <<<example-api-1.0-SNAPSHOT-mock.jar>>>
  artifact. Later, in order to add this artifact to the <<<example-core>>> module
  use this dependency definition:

+--
<dependency>
  <groupId>com.example</groupId>
  <artifactId>example-api</artifactId>
  <version>1.0-SNAPSHOT</version>
  <classifier>mock</classifier> <!-- this is the trick -->
  <scope>test</scope>
</dependency>
+--
